rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && request.auth.token.role == 'admin';
    }

    function isResponder() {
      return isAuthenticated() && 
        getUserRole().lower() == 'responder';
    }

    function isApprovedResponder() {
      return isResponder() && 
        get(/databases/$(database)/documents/responders/$(request.auth.uid)).data.status.lower() == 'approved';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidResponderType(type) {
      return type in ['Medical', 'Police', 'Fire', 'Traffic'];
    }

    function isValidFileType() {
      return request.resource.contentType.matches('image/.*') ||
             request.resource.contentType.matches('application/pdf');
    }

    function isValidFileSize() {
      return request.resource.size < 10 * 1024 * 1024; // 10MB
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Responders collection
    match /responders/{responderId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(responderId);
    }

    // Safety tips collection
    match /safety_tips/{tipId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAuthenticated() && 
        (isAdmin() || resource.data.authorId == request.auth.uid);
    }

    // Comments collection (as a separate top-level collection)
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && 
        request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isAuthenticated() && 
        resource.data.authorId == request.auth.uid;
    }

    // ðŸ“¢ NOTIFICATIONS Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        (resource.data.forRole == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role) ||
        (resource.data.userId == request.auth.uid) ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // ðŸš¨ INCIDENTS Collection
    match /incidents/{incidentId} {
      allow create: if isAuthenticated();
      allow read, update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin() ||
        (isApprovedResponder() && resource.data.responderType == get(/databases/$(database)/documents/responders/$(request.auth.uid)).data.responderType)
      );
      allow delete: if isAdmin();
    }

    // Forum posts collection
    match /forum_posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
        (isAuthenticated() && resource.data.authorId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Post likes collection
    match /post_likes/{likeId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }

    // Reports Collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (isAdmin() || isApprovedResponder() || isOwner(resource.data.userId));
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isApprovedResponder();
      allow delete: if isAdmin();
    }

    // Statistics Collection
    match /statistics/{statId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Dashboard Stats Collection
    match /dashboardStats/{statId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Analytics Collection
    match /analytics/{docId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // System Settings
    match /settings/{settingId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Anonymous Reports
    match /anonymous_reports/{reportId} {
      allow create: if true;
      allow read: if isAuthenticated() && (isAdmin() || isApprovedResponder());
      allow update, delete: if isAdmin();
    }

    // Forum Posts
    match /forum_posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || isOwner(resource.data.userId));
      allow delete: if isAdmin() || isOwner(resource.data.userId);
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (isAdmin() || isOwner(resource.data.userId));
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Admin access
    match /{document=**} {
      allow read, write: if isAdmin();
    }
  }
}

// Storage rules
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isValidFileType(contentType) {
      return contentType.matches('image/.*') ||
             contentType.matches('video/.*') ||
             contentType.matches('application/pdf');
    }

    function isValidFileSize(size) {
      return size < 10 * 1024 * 1024; // 10MB
    }

    // License files
    match /licenses/{userId}/{fileName} {
      allow read: if isAuthenticated() && (isAdmin() || isOwner(userId));
      allow write: if isAuthenticated() && isOwner(userId) && 
                   isValidFileType(request.resource.contentType) && 
                   isValidFileSize(request.resource.size);
    }

    // Incident files
    match /incidents/{type}/{fileName} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated() && 
                   isValidFileType(request.resource.contentType) && 
                   isValidFileSize(request.resource.size);
    }
    
    // Default deny
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
