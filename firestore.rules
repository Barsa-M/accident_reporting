rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isAdmin() {
      return isAuthenticated() && 
        getUserRole().lower() == 'admin';
    }

    function isResponder() {
      return isAuthenticated() && 
        getUserRole().lower() == 'responder';
    }

    function isApprovedResponder() {
      return isResponder() && 
        get(/databases/$(database)/documents/responders/$(request.auth.uid)).data.status.lower() == 'approved';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isValidResponderType(type) {
      return type in ['Medical', 'Police', 'Fire', 'Traffic'];
    }

    // üîê USERS Collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }

    // üõ°Ô∏è RESPONDERS Collection
    match /responders/{responderId} {
      // Anyone can create a responder application with valid responder type
      allow create: if isAuthenticated() && 
                     isValidResponderType(request.resource.data.responderType);
      
      // Responders can read their own data, admins can read all
      allow read: if isAuthenticated() && (isOwner(responderId) || isAdmin());
      
      // Only admins can update status, responders can update their own non-status fields
      allow update: if isAdmin() || 
        (isResponder() && isOwner(responderId) && 
         !request.resource.data.diff(resource.data).affectedKeys().hasAny(['status', 'createdAt']) &&
         (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['responderType']) || 
          isValidResponderType(request.resource.data.responderType)));
      
      // Only admins can delete
      allow delete: if isAdmin();
    }

    // üì¢ NOTIFICATIONS Collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (
        (resource.data.forRole == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role) ||
        (resource.data.userId == request.auth.uid) ||
        isAdmin()
      );
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin();
    }

    // üö® INCIDENTS Collection
    match /incidents/{incidentId} {
      // Any signed-in user can create
      allow create: if isAuthenticated();

      // Approved responders of matching type can read/update assigned incidents
      allow read, update: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin() ||
        (isApprovedResponder() && resource.data.responderType == get(/databases/$(database)/documents/responders/$(request.auth.uid)).data.responderType)
      );

      allow delete: if isAdmin();
    }

    // Forum posts collection
    match /forum_posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAdmin() || 
        (isAuthenticated() && resource.data.authorId == request.auth.uid);
      allow delete: if isAdmin();
    }

    // Post likes collection
    match /post_likes/{likeId} {
      allow read: if isAuthenticated();
      allow create, delete: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
    }

    // Comments subcollection
    match /forum_posts/{postId}/comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isAdmin() || 
        (isAuthenticated() && resource.data.authorId == request.auth.uid);
    }

    // Reports Collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && (isAdmin() || isApprovedResponder() || isOwner(resource.data.userId));
      allow create: if isAuthenticated();
      allow update: if isAdmin() || isApprovedResponder();
      allow delete: if isAdmin();
    }

    // Statistics Collection
    match /statistics/{statId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Dashboard Stats Collection
    match /dashboardStats/{statId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Analytics Collection
    match /analytics/{docId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // System Settings
    match /settings/{settingId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Anonymous Reports
    match /anonymous_reports/{reportId} {
      allow create: if true;
      allow read: if isAuthenticated() && (isAdmin() || isApprovedResponder());
      allow update, delete: if isAdmin();
    }

    // Forum Posts
    match /forum_posts/{postId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || isOwner(resource.data.userId));
      allow delete: if isAdmin() || isOwner(resource.data.userId);
    }

    // Comments
    match /comments/{commentId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (isAdmin() || isOwner(resource.data.userId));
      allow delete: if isAdmin() || isOwner(resource.data.userId);
    }

    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && (isAdmin() || isOwner(resource.data.userId));
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }
}
